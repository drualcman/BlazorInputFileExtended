@page "/changes-log"
<h1>Changes Log</h1>
<h2>Version 3</h2>
<h3>3.5.24  [2023-08-10]</h3>
<p>Add 2 new Func properties in <var>ButtonOptions</var>. <var>Func&lt;IReadOnlyList&lt;FileUploadContent&gt;, Task&lt;bool&gt;&gt; OnBeforeSubmit</var> and <var>Func&lt;bool, Task&gt; OnAfterSubmit</var>. If user want to do some code before and after submit the form.</p>
<h3>3.5.23  [2023-08-09]</h3>
<ul>
    <li>Add parameter to hide show the list of the files.</li>
    <li>Change Parameter buttonOptions OnSubmit to Func to return a <var>Func&lt;IReadOnlyList&lt;FileUploadContent&gt;, Task&lt;bool&gt;&gt;</var>.</li>
    <li>Removed not used injections.</li>
</ul> 
<h3>3.5.22 [2023-08-06]</h3>
<ul>
    <li>Change name to BlazorBasics.InputFileExtended becasue now is supported by <a href="https://digitaldoor.com.au/">Digital Door Aus</a> and his BalzorBasics tools.</li>
    <li>Separate scripts to drag and drop and copy and paset. Now can enable also past when you are on a simple input text.</li>
    <li>Show a list with all files are uploading for can removed if user want to change the mind</li>
</ul>
<h2>Version 2</h2>
<h3>2.4.22 [2023-08-06]</h3>
<p>
    Removed injection of navigation manager and use a helpr to get the correct path.
</p>
<h3>2.4.21 [2023-08-06]</h3>
<ul>
    <li>Controle APIErrorMessage internal message to show the label only if have errors, because right now it's always in the dom</li>
    <li>Change how to use SetFilebytes and now it's only internal from the component can use</li>
    <li>Add enumeral for the event actions. Using the enumeral in the event callbacks</li>
    <li>Fixed clean error message when select new file.</li>
    <li>Dispose correctly the HttpClient when the objext are disposed</li>
</ul>
<h3>2.4.20 [2023-07-31]</h3>
<p>
    Version 2.4.20: Update Microsoft.AspNetCore.Components.Web to version 6.0.20 and removed dependency from Microsoft.AspNetCore.JsonPatch to version.
</p>
<h3>2.4.19 [2023-04-03]</h3>
<p>
    Fixed control exception when dispose the script reference in Blazor Server when is used from MVC project.
</p>
<pre>
<code>
fail: Microsoft.AspNetCore.Components.Server.Circuits.CircuitHost[111]
      Unhandled exception in circuit 'MMyep9yxskcsXUtiD1pFvhgsYcVpJBOGGff1ttjNSi8'.
      Microsoft.JSInterop.JSDisconnectedException: JavaScript interop calls cannot be issued at this time. This is because the circuit has disconnected and is being disposed.
         at Microsoft.AspNetCore.Components.Server.Circuits.RemoteJSRuntime.BeginInvokeJS(Int64 asyncHandle, String identifier, String argsJson, JSCallResultType resultType, Int64 targetInstanceId)
         at Microsoft.JSInterop.JSRuntime.InvokeAsync[TValue](Int64 targetInstanceId, String identifier, CancellationToken cancellationToken, Object[] args)
         at Microsoft.JSInterop.JSRuntime.InvokeAsync[TValue](Int64 targetInstanceId, String identifier, Object[] args)
         at Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(IJSRuntime jsRuntime, String identifier, Object[] args)
         at Microsoft.JSInterop.Implementation.JSObjectReference.DisposeAsync()
         at BlazorInputFileExtended.InputFileExtended.UnLoadDropScriptsAsync()
         at BlazorInputFileExtended.InputFileExtended.Dispose()
         at System.Threading.Tasks.Task.&lt;&gt;c.&lt;ThrowAsync&gt;b__128_0(Object state)
         at Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.ExecuteSynchronously(TaskCompletionSource completion, SendOrPostCallback d, Object state)
         at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
      --- End of stack trace from previous location ---
         at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
         at Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.ExecuteBackground(WorkItem item)
    </code>
</pre>
<h3>2.4.18 [2022-08-17]</h3>
<p>
    Update to NET 6 and improve MultipartFormDataContent to avoid null references. Also improve the XML help from the object.
</p>
<h3>1.3.17 [2021-09-09]</h3>
<p>Fixed a possible bug when you update from previous version about DragAndDrop.js not found when try to publish the app. Only affects if you are using version lower than 1.3.16 and update the nuget.</p>
<p>
    <strong>Bug found:</strong><var>Microsoft.NET.Sdk.BlazorWebAssembly\targets\Microsoft.NET.Sdk.BlazorWebAssembly.Current.targets(564,5): error MSB6006: "C:\hostedtoolcache\windows\dotnet" exited with code 1.</var><br />
    When try to publish after update the nuget from version before 1.3.16. This is relative can't find a file <i>DragAndDrop.js</i> is renamed like <i>DragAndDrop1316.js</i> to avoid browser cache issue, but for some reason dotnet still looking for the other file when publish.<br />
    Is not enough with clean solution to avoid this issue. Please update to the version 1.3.17 if you update to the version 1.3.16.
</p>
<h3>1.3.16 [2021-09-05]</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Change how to manage and load the javascript file dynamic like a blazor object reference.</li>
    <li><strong>DragAndDrop.js:</strong></li>
    <li>Add paste function for can upload files when copy from Explorer</li>
    <li>
<pre>
<code>/**** 
 * DrUalcman 17 Jun 2021
 * Author: Sergi Ortiz Gomez
 * Version 1.2.7 BlazorInputFileExtended
 * License: Apache License, Version 2.0 
 *          SPDX short identifier: Apache-2.0
 * Update:  05 September 2021 Version 1.3.16
 *          Update how to manage the object reference from Blazor and to Blazor
 *          Add paste function
 ****/
/** Export DragAndDrop to load the file dynamically */
export function DragAndDrop(dropZone, inputContainer) {
    const inputFile = inputContainer.querySelector('input[type="file"]');

    function onDropHandler(ev) {
        // Prevent default behavior (Prevent file from being opened)
        ev.preventDefault();
        // send the files to the input file
        inputFile.files = ev.dataTransfer.files;
        // Generate the change event to notify to Blazor have some change.
        try {
            let event = new Event('change', { bubbles: true }); // Create the event.
            inputFile.dispatchEvent(event);                     // Dispatch the event.
        } catch (e) {
            console.warn(e);
        }
        // clean the drag and drop data
        RemoveDragData(ev)
    }

    function onPaste(ev) {
        inputFile.files = ev.clipboardData.files;
        let event = new Event('change', { bubbles: true });
        inputFile.dispatchEvent(event);
    }

    /*** Setup the events */
    RemoveEvents();
    dropZone.addEventListener('dragover', onDragOverHandler, false);
    dropZone.addEventListener('drop', onDropHandler, false);
    document.body.addEventListener('paste', onPaste, false);

    function onDragOverHandler(ev) {
        // Prevent default behavior (Prevent file from being opened)
        ev.preventDefault();
        ev.stopPropagation();
    }

    function RemoveDragData(ev) {
        if (ev.dataTransfer.items) {
            // Use DataTransferItemList interface to remove the drag data
            ev.dataTransfer.items.clear();
        } else {
            // Use DataTransfer interface to remove the drag data
            ev.dataTransfer.clearData();
        }
    }

    function RemoveEvents() {
        try {
            dropZone.removeEventListener('dragover', onDragOverHandler, false);
            dropZone.removeEventListener('drop', onDropHandler, false);
            document.body.removeEventListener('paste', onPaste, false);
        } catch (e) {
            console.warn('DragAndDrop: RemoveEvents', e);
        }
    }

    return {
        Dispose: () => {
            RemoveEvents();
        }
    }
}
</code>
</pre>
    </li>
</ul>
<h3>1.2.15 [2021-09-04]</h3>
<ul>
    <li><strong>InputFileHandler:</strong></li>
    <li>Exception <var>InputfileException</var> inherit from ArgumentException encapsulate the exception from the handler.</li>
    <li><var>ExceptionType</var> enum to identify what exception is.</li>
</ul>
<h3>1.2.14 [2021-08-21]</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>New parameter <var>AutoUpload</var> to upload the file when is selected. Required <var>TargetToPostFile</var> with the url to upload the file.</li>
</ul>
<h3>1.2.13 [2021-08-14]</h3>
<ul>
    <li><strong>Content:</strong></li>
    <li>Small changes in a css about drag and drop</li>
</ul>
<h3>1.2.12 [2021-08-05]</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Add default message error if don't have subscribe a event callback to show the error messages.</li>
    <li><strong>InputFileHandler:</strong></li>
    <li>Change to virtual all HttpClient methods to use you own implementation.</li>
</ul>
<h3>1.2.11 [2021-07-31]</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Add cascading parameter EditContext to manage form validation when click on upload button.</li>
    <li>Expose method <strong>FormSave</strong> for can be call from the event <i>OnValidSubmit</i>, this required a component reference.</li>
    <li>If <var>EditContext</var> is set and <var>TargetDataObject</var> is not set, then send the form using the data form Context.</li>
</ul>
<h3>1.2.10 [2021-07-20]</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Solved issue about base URL when is published in a folder not in a root</li>
    <li>Expose OnChange Event to use as a <i>normal</i> InputFile</li>
    <li><strong>Content:</strong></li>
    <li>Fixed a bug to load the draganddrop1316.js when publish in a folder not in a root</li>
</ul>
<h3>1.2.6 [2021-07-17] Drag and Drop requested from users</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Change to public field read only <i>InputFieldId</i> if you need to know the Id assigned to the input when has reference name</li>
    <li>Add property <var>bool</var> <i>CanDropFiles</i> to enabled drag and drop files</li>
    <li>Add property <var>string</var> <i>DropZoneCss</i> CSS to style the drop zone. Default <i>dropzone</i></li>
    <li>
        <pre>
<code>.dropzone {
    cursor: pointer;
    width: 100%;
    border: 2px dashed rgba(0,0,0,.25);
    border-radius: 20px;
    text-align: center;
    line-height: 180px;
    font-size: 1.5rem;
    color: rgba(0,0,0,.25);
}

</code>
</pre>
    </li>
    <li>Add property <var>string</var> <i>DroppingCss</i> CSS for active the drop zone when user drag in. Default <i>dropzone-drag</i></li>
    <li>
        <pre>
<code>.dropzone-drag {
    border: 2px dashed rgba(0,0,0,.65);
    color: rgba(0,0,0,.65);
}

</code>
</pre>
    </li>
    <li>Add method <i>LoadDropScriptsAsync</i> for can enable the drag and drop when the user want.</li>
    <li>Add method <i>UnLoadDropScriptsAsync</i> to disabled drag and drop options and remove the JavaScript from the <var>HEAD</var> in the page.</li>
    <li><strong>Content:</strong></li>
    <li>Add JAVASCRIPT file to manage the drag and drop actions.</li>
    <li>
        <pre>
<code>var InputFileId;            //id for the inputfile into the page to setup the events for drag and drop
/** Export DragAndDrop to load the file dynamically */
export const DragAndDrop = {
    // Load PayPal Javascripts
    Load: (dropId) => {
        let tag = document.getElementById('draganddrop-script');
        if (!tag) {
            tag = document.createElement('script');
            tag.id = 'draganddrop-script'
            tag.src = "/_content/BlazorInputFileExtended/DragAndDrop.js";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
        InputFileId = dropId;
        setEvents();
    }
}
/*** Setup the events */
function setEvents() {
    let d = document.getElementById(`Contaniner_${InputFileId}`);
    if (d) {
        d.addEventListener('dragover', dragOverHandler, false);
        d.addEventListener('drop', dropHandler, false);
    }
}

function dropHandler(ev) {
    // Prevent default behavior (Prevent file from being opened)
    ev.preventDefault();
    ev.stopPropagation();
    // send the files to the input file
    let inputfile = document.getElementById(InputFileId);
    inputfile.files = ev.dataTransfer.files;
    // Generate the change event to notify to Blazor have some change.
    try {
        let event = new Event('change');   // Create the event.
        inputfile.dispatchEvent(event);    // Dispatch the event.
    } catch (e) {
        console.warn(e);
    }
    // clean the drag and drop data
    removeDragData(ev)
}

function dragOverHandler(ev) {
    // Prevent default behavior (Prevent file from being opened)
    ev.preventDefault();
    ev.stopPropagation();
}

function removeDragData(ev) {
    if (ev.dataTransfer.items) {
        // Use DataTransferItemList interface to remove the drag data
        ev.dataTransfer.items.clear();
    } else {
        // Use DataTransfer interface to remove the drag data
        ev.dataTransfer.clearData();
    }
}
</code>
</pre>
    </li>
</ul>
<h3>1.1.5 [2021-07-13]</h3>
<ul>
    <li>Set public the helper class FormData for can be used from a derivate class.</li>
    <li>Fixed InputFileType. If is not string empty always setup like *. Only need setup if it's string empty and IsImage to setup like image/* to get all the images.</li>
    <li>When clean change message from the event set total files and total size cleaned.</li>
    <li>Fixed always send to the TarjetToPost when have some data to send if have or nor files</li>
</ul>
<h3>1.1.4 [2021-07-10] First big changes after use</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Add property <var>object</var> TargetDataObject. Used to send all form data to the server. This create <var>MultipartFormDataContent</var> with the content about the object and send to the target post.</li>
    <li>Add property <i>Files</i> expose InputFileHandler can be used when have @@ref manage the files. Property read only.</li>
    <li>Control if have files selected when click on the button for upload files. If not fire a OnError Event</li>
    <li>Change OnSave return <var>object</var> to <var>HttpResponseMessage</var>. you have more control about what is the response from the server when upload file.</li>
    <li><strong>InputFileHandler:</strong></li>
    <li>Add new UploadAsyc with 2 generic type <var>TModel</var> with the value must be return after send the files to the target post. And <var>TData</var> with the object content the form data the content to create <var>MultipartFormDataContent</var> with the content about the object and send to the target post</li>
    <li>Add methods to update by <var>Guid</var> <i>FileId</i></li>
    <li>Add methods to remove by <var>Guid</var> <i>FileId</i> or <var>FileUploadContent</var> <i>file</i></li>
    <li>Add methods UploadAsync no generic with return <var>HttpResponseMessage</var></li>
    <li><strong>FileUploadContent:</strong></li>
    <li>Add property <var>Guid</var> <i>FileId</i> to identify the image in the object</li>
    <li>Add property <var>byte[]</var> <i>FileBytes</i> return file bytes</li>
    <li>Add property <var>string</var> <i>ToImageHTML</i> return a Base64String in a format to use in the tag image property src</li>
    <li><strong>FileUploadEventArgs:</strong></li>
    <li>Change property from <var>int</var> <i>FileIndex</i> to <var>Guid</var> <i>FileId</i>. Be aware if you are using.</li>
</ul>
<h3>1.0.3 [2021-07-08]</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Removed the <var>typeparam</var> TResponse, is not longer needed. Please remove from the declaration.</li>
    <li>Change Property  <var>string</var> <i>ButtonText</i> to <var>RenderFragment</var> <i>ButtonContent</i> To personalize the content in button upload. Be aware if you are using.</li>
    <li>Change Property <i>FormData</i> with name <i>TargetFormDataContent</i>. Be aware if you are using.</li>
    <li>Change Property <i>FormField</i> with name <i>TargetFormFieldName</i>. Be aware if you are using.</li>
    <li>Change Property <i>EndPoint</i> with name <i>TargetToPostFile</i>. Be aware if you are using.</li>
    <li>Add <var>RenderFragment</var> <i>InputContent</i> To personalize the content in input file button.</li>
    <li>Add isolate CSS for some default style on <i>InputCss</i>. Default class <i>input-file button-file.</i></li>
    <li>Add isolate CSS for some default style on <i>ButtonCss</i>. Default class <i>input-file button-upload.</i></li>
    <li>
        Isolate CSS:
<pre>
<code>    ::deep input[type="file"] {
    display: none;
    }

    .input-file {
    padding: 0.3rem 2rem;
    box-shadow: darkgrey 0 0 0.5rem 0.1rem;
    border-radius: 0.2rem;
    display: inline-block;
    margin: 0 0.3rem;
    text-align: center;
    }

    .button-file {
    background: #e8e8e8;
    }

    .button-upload {
    background: #00188a;
    color: whitesmoke;
    }

    .info {
    color: forestgreen;
    width: 100%;
    }
</code>
</pre>
    </li>
    <li><strong>InputFileHandler:</strong></li>
    <li>Change delegates from <var>Task</var> to <var>void</var>. Be aware if you are using events or a derivate class.</li>
</ul>
<h3>1.0.2 [2021-07-06]</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Add CleanOnSuccessUpload Property in InputFileExtended. Default value <i>false</i>. This automatic clean the files load into the component after send with the upload form action.</li>
    <li><strong>InputFileHandler:</strong></li>
    <li>Add Clean() method to remove all files loaded</li>
    <li>Add methods to manage events from a derivate class.</li>
</ul>

<GAdSense />