@page  "/changes-log"
    <ins class="adsbygoogle"
         style="display:block"
         data-ad-client="ca-pub-6750814218988007"
         data-ad-slot="2643405184"
         data-ad-format="auto"
         data-full-width-responsive="true"></ins>
    <h1>Changes Log</h1>
    <h2>Version</h2>
    <h3>1.2.6 [2021-07-17] Drag and Drop requested from users</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Change to public field read only <i>InputFieldId</i> if you need to know the Id assigned to the input when has reference name</li>
    <li>Add property <var>bool</var> <i>CanDropFiles</i> to enabled drag and drop files</li>
    <li>Add property <var>string</var> <i>DropZoneCss</i> CSS to style the drop zone. Default <i>dropzone</i></li>
    <li>
        <pre>
<code>.dropzone {
    cursor: pointer;
    width: 100%;
    border: 2px dashed rgba(0,0,0,.25);
    border-radius: 20px;
    text-align: center;
    line-height: 180px;
    font-size: 1.5rem;
    color: rgba(0,0,0,.25);
}

</code>
</pre>
    </li>
    <li>Add property <var>string</var> <i>DroppingCss</i> CSS for active the drop zone when user drag in. Default <i>dropzone-drag</i></li>
    <li>
        <pre>
<code>.dropzone-drag {
    border: 2px dashed rgba(0,0,0,.65);
    color: rgba(0,0,0,.65);
}

</code>
</pre>
    </li>
    <li>Add JAVASCRIPT file to manage the drag and drop actions.</li>
    <li>
        <pre>
<code>var InputFileId;            //id for the inputfile into the page to setup the events for drag and drop
/** Export DragAndDrop to load the file dynamically */
export const DragAndDrop = {
    // Load PayPal Javascripts
    Load: (dropId) => {
        let tag = document.getElementById('draganddrop-script');
        if (!tag) {
            tag = document.createElement('script');
            tag.id = 'draganddrop-script'
            tag.src = "/_content/BlazorInputFileExtended/DragAndDrop.js";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
        InputFileId = dropId;
        setEvents();
    }
}
/*** Setup the events */
function setEvents() {
    let d = document.getElementById(`Contaniner_${InputFileId}`);
    if (d) {
        d.addEventListener('dragover', dragOverHandler, false);
        d.addEventListener('drop', dropHandler, false);
    }
}

function dropHandler(ev) {
    // Prevent default behavior (Prevent file from being opened)
    ev.preventDefault();
    ev.stopPropagation();
    // send the files to the input file
    let inputfile = document.getElementById(InputFileId);
    inputfile.files = ev.dataTransfer.files;
    // Generate the change event to notify to Blazor have some change.
    try {
        let event = new Event('change');   // Create the event.
        inputfile.dispatchEvent(event);    // Dispatch the event.
    } catch (e) {
        console.warn(e);
    }
    // clean the drag and drop data
    removeDragData(ev)
}

function dragOverHandler(ev) {
    // Prevent default behavior (Prevent file from being opened)
    ev.preventDefault();
    ev.stopPropagation();
}

function removeDragData(ev) {
    if (ev.dataTransfer.items) {
        // Use DataTransferItemList interface to remove the drag data
        ev.dataTransfer.items.clear();
    } else {
        // Use DataTransfer interface to remove the drag data
        ev.dataTransfer.clearData();
    }
}
</code>
</pre>
    </li>
    <li>Add method <i>LoadDropScriptsAsync</i> for can enable the drag and drop when the user want.</li>
    <li>Add method <i>UnLoadDropScriptsAsync</i> to disabled drag and drop options and remove the JavaScript from the <var>HEAD</var> in the page.</li>
</ul>
<h3>1.1.5 [2021-07-13]</h3>
<ul>
    <li>Set public the helper class FormData for can be used from a derivate class.</li>
    <li>Fixed InputFileType. If is not string empty always setup like *. Only need setup if it's string empty and IsImage to setup like image/* to get all the images.</li>
    <li>When clean change message from the event set total files and total size cleaned.</li>
    <li>Fixed always send to the TarjetToPost when have some data to send if have or nor files</li>
</ul>
    <h3>1.1.4 [2021-07-10] First big changes after use</h3>
<ul>
    <li><strong>InputFileExtendend:</strong></li>
    <li>Add property <var>object</var> TargetDataObject. Used to send all form data to the server. This create <var>MultipartFormDataContent</var> with the content about the object and send to the target post.</li>
    <li>Add property <i>Files</i> expose InputFileHandler can be used when have @@ref manage the files. Property read only.</li>
    <li>Control if have files selected when click on the button for upload files. If not fire a OnError Event</li>
    <li>Change OnSave return <var>object</var> to <var>HttpResponseMessage</var>. you have more control about what is the response from the server when upload file.</li>
    <li><strong>InputFileHandler:</strong></li>
    <li>Add new UploadAsyc with 2 generic type <var>TModel</var> with the value must be return after send the files to the target post. And <var>TData</var> with the object content the form data the content to create <var>MultipartFormDataContent</var> with the content about the object and send to the target post</li>
    <li>Add methods to update by <var>Guid</var> <i>FileId</i></li>
    <li>Add methods to remove by <var>Guid</var> <i>FileId</i> or <var>FileUploadContent</var> <i>file</i></li>
    <li>Add methods UploadAsync no generic with return <var>HttpResponseMessage</var></li>
    <li><strong>FileUploadContent:</strong></li>
    <li>Add property <var>Guid</var> <i>FileId</i> to identify the image in the object</li>
    <li>Add property <var>byte[]</var> <i>FileBytes</i> return file bytes</li>
    <li>Add property <var>string</var> <i>ToImageHTML</i> return a Base64String in a format to use in the tag image property src</li>
    <li><strong>FileUploadEventArgs:</strong></li>
    <li>Change property from <var>int</var> <i>FileIndex</i> to <var>Guid</var> <i>FileId</i>. Be aware if you are using.</li>
</ul>
    <h3>1.0.3 [2021-07-08]</h3>
    <ul>
        <li><strong>InputFileExtendend:</strong></li>
        <li>Removed the <var>typeparam</var> TResponse, is not longer needed. Please remove from the declaration.</li>
        <li>Change Property  <var>string</var> <i>ButtonText</i> to <var>RenderFragment</var> <i>ButtonContent</i> To personalize the content in button upload. Be aware if you are using.</li>
        <li>Change Property <i>FormData</i> with name <i>TargetFormDataContent</i>. Be aware if you are using.</li>
        <li>Change Property <i>FormField</i> with name <i>TargetFormFieldName</i>. Be aware if you are using.</li>
        <li>Change Property <i>EndPoint</i> with name <i>TargetToPostFile</i>. Be aware if you are using.</li>
        <li>Add <var>RenderFragment</var> <i>InputContent</i> To personalize the content in input file button.</li>
        <li>Add isolate CSS for some default style on <i>InputCss</i>. Default class <i>input-file button-file.</i></li>
        <li>Add isolate CSS for some default style on <i>ButtonCss</i>. Default class <i>input-file button-upload.</i></li>
        <li>
            Isolate CSS:
<pre>
<code>    ::deep input[type="file"] {
    display: none;
    }

    .input-file {
    padding: 0.3rem 2rem;
    box-shadow: darkgrey 0 0 0.5rem 0.1rem;
    border-radius: 0.2rem;
    display: inline-block;
    margin: 0 0.3rem;
    text-align: center;
    }

    .button-file {
    background: #e8e8e8;
    }

    .button-upload {
    background: #00188a;
    color: whitesmoke;
    }

    .info {
    color: forestgreen;
    width: 100%;
    }
</code>
</pre>
        </li>
        <li><strong>InputFileHandler:</strong></li>
        <li>Change delegates from <var>Task</var> to <var>void</var>. Be aware if you are using events or a derivate class.</li>
    </ul>
    <h3>1.0.2 [2021-07-06]</h3>
    <ul>
        <li><strong>InputFileExtendend:</strong></li>
        <li>Add CleanOnSuccessUpload Property in InputFileExtended. Default value <i>false</i>. This automatic clean the files load into the component after send with the upload form action.</li>
        <li><strong>InputFileHandler:</strong></li>
        <li>Add Clean() method to remove all files loaded</li>
        <li>Add methods to manage events from a derivate class.</li>
    </ul>