@page "/wiki/handler"
    <ins class="adsbygoogle"
         style="display:block"
         data-ad-client="ca-pub-6750814218988007"
         data-ad-slot="2643405184"
         data-ad-format="auto"
         data-full-width-responsive="true"></ins>
    <h2>Namespace BlazorInputFileExtended</h2>
    <h1>InputFileHandler</h1>
    <p>You can create you own handler inherit from this to add, for example, post actions with authentication. Implement the interface IDisposable.</p>
    <h3>Protected variables</h3>
<pre>
<code>
    protected HttpClient HttpClient;
    protected SortedDictionary&lt;int, FileUploadContent&gt; UploadedFiles;
</code>
</pre>
    <h3>Constructor</h3>
<pre>
<code>public InputFileHandler(HttpClient httpClient = null, int maxFiles = 5, long maxSize = 512000, string formField = "files")</code>
</pre>
    <ul>
        <li><strong>httpClient:</strong> Inject the service</li>
        <li><strong>maxFiles:</strong> Maximum files allowed to upload</li>
        <li><strong>maxSize:</strong> Maximum file size to upload</li>
        <li><strong>formField:</strong> Form content name to upload the file</li>
    </ul>
    <h3>Properties</h3>
<pre>
<code>    public FileUploadContent this[int index]
    public FileUploadContent this[string fileName]
    public FileUploadContent First
    public FileUploadContent Last
    public int Count
    public long Size
</code>
</pre>
    <h3>Fields</h3>
<pre>
<code>
    public StreamContent UploadedImage;
    public string FileName;
</code>
</pre>
    <h3>Events</h3>
<pre>
<code>    public delegate void UploadEventHandler(object sender, FileUploadEventArgs e);
    public delegate void UploadsEventHandler(object sender, FilesUploadEventArgs e);
    public delegate void UploadErrorEventHandler(object sender, ArgumentException e);
    public delegate void APIErrorEventHandler(object sender, ArgumentException e);

    public virtual event UploadEventHandler OnUploadFile;
    public virtual event UploadsEventHandler OnUploaded;
    public virtual event UploadErrorEventHandler OnUploadError;
    public virtual event APIErrorEventHandler OnAPIError;

    //To use from a derivate class
    protected virtual void OnUploadFileEvent(object sender, FileUploadEventArgs e)
    protected virtual void OnUploadedEvent(object sender, FilesUploadEventArgs e)
    protected virtual void OnUploadErrorEvent(object sender, ArgumentException e)
    protected virtual void OnAPIErrorEvent(object sender, ArgumentException e)
</code>
</pre>
    <h3>Methods</h3>
<pre>
<code>    public IEnumerator&lt;FileUploadContent&gt; GetEnumerator()
    public void UploadFile(InputFileChangeEventArgs e)
    public void Clean()

    public void Add(FileUploadContent image)
    public void Update(int index, FileUploadContent image)
    public bool Update(string fileName, FileUploadContent image)
    public bool Remove(int index)
    public bool Remove(string fileName)

    public void SetHttpClient(HttpClient httpClient)
    public void SetMaxFiles(int maxfile)
    public void SetMaxFileSize(long maxSize)
    public void SetFormField(string field)
</code>
</pre>
    <h3>HttpClient calls</h3>
<pre>
<code>    public async Task&lt;TModel&gt; UploadAsync&lt;TModel&gt;(string urlEndPoint)
    public async Task&lt;TModel&gt; UploadAsync&lt;TModel&gt;(string urlEndPoint, InputFileChangeEventArgs files)
    public async Task&lt;TModel&gt; UploadAsync&lt;TModel&gt;(string urlEndPoint, MultipartFormDataContent content)
    public async Task&lt;TModel&gt; UploadAsync&lt;TModel&gt;(string urlEndPoint, MultipartFormDataContent content, bool ignoreFiles)
    public async Task&lt;TModel&gt; UploadAsync&lt;TModel&gt;(string urlEndPoint, MultipartFormDataContent content, InputFileChangeEventArgs files)
    public async Task&lt;TModel&gt; UploadAsync&lt;TModel&gt;(string urlEndPoint, MultipartFormDataContent content, StreamContent file, string fileName = "")

    public async Task&lt;bool&gt; DeleteAsync(string endPoint, int index)
    public async Task&lt;bool&gt; DeleteAsync(string endPoint, string filename)
</code>
</pre>

